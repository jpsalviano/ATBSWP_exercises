-Chapter I - Python Basics-

Math operators in Python (from higest to lowest precedence): ** % // / * - +

Expressions are just values combined with operators, and they always evaluate down to a single value.

Data type: category for values, and every value belongs to exactly one data type. Most common: integers (int) like -2, 0, 5; floating-point numbers (floats) like -1.25, -1.0, 0.0, 1.25; strings (str) like 'a', 'Hello!', '11 cats'.

Overwriting the variable: when a variable is assigned a new value, the old value is forgotten.

yourFirstProgram.py

Argument: a value that is passed to a function call.

print()
input()
len()
str(), int(), float()

Practice Questions

1:
* operator
'hello' value
-88.8 value
- operator
/ operator
+ operator
5 value

2:
spam variable
'spam' string

3:
integers, floats and strings

4:
values and operators
they evaluate to a single value

5:
the difference is on how the computer interprets the data - when the program is executed the expression is solved by the computer and it evaluates to a single value, while the statement feeds the computer with some kind of infomation and is not evaluated to a single value.

6:
20

7:
'spamspamspam'
'spamspamspam'

8:
a variable name can't begin with a number

9:
int(), float(), str()

10:
an integer can't be concatenated to a string nor a string can be added to a number
correction: 'I have eaten' + str(99) + ' burritos.'

Extra credit:
len():
	Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).

round(number[, ndigits]):
	Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.

Floating Point Arithmetic: Issues and Limitations.
(https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues)

"On most machines today, floats are approximated using a binary fraction with the numerator using the first 53 bits starting with the most significant bit and with the denominator as a power of two. In the case of 1/10, the binary fraction is 3602879701896397 / 2 ** 55 which is close to but not exactly equal to the true value of 1/10."

Representation error -> explains the “0.1” example in detail.

-Chapter II - Flow Control-

Boolean values: True / False

Comparison operators: == != < > <= =>

Boolean operators: and / or / not

After any math and comparison operators evaluate, Python evaluates the not operators first, then the end operators, and the the or operators.

Elements of Flow Control

Flow Control Statements

if statements

else statements

elif statements

while loop statements

break statements

continue statements

for loops and the range() function

An Equivalent while loop

The Starting, Stopping, and Stepping Arguments to range()

Importing modules

from import Statements

Ending a Program Early with sys.exit()

Practice Questions

1:
True and False

2:
and or not

3:
True and True = True
True and False = False
False and True = False
False and False = False

True or True = True
True or False = True
False or True = True
False or False = False

not True = False
not False = True

4:
False
False
True
False
False
True

5:
< <= > >= == !=

6:
== equal (comparison operator)
= assignment operator (stores a value to a variable)

7:
A piece of a block of code that is evaluated to True or False and depending of the result of that evaluation it executes the rest of the block of code or just skip it.
Answer from the book: A condition is an expression used in a flow control statement that evaluates to a Boolean value.

8:
corrected - The three blocks are everything inside the if statement and the lines
print('bacon') and print('ham').

	print('eggs')
	if spam > 5:
		print('bacon')
	else:
		print('ham')
	print('spam')

9:
spam = input()

if spam == 1:
    print('Hello')
elif spam == 2:
    print('Howdy')
else:
    print('Greetings!')

10)
ctrl + c

11)
a break statement makes the code leave the loop immediately while a continue statement restarts the loop right away

12)
there's no difference among those options. in the first case, only the final point of the range is informed which makes it start from 0. in the second range, the 0 is informed as the starting point, just as standard, and that's what happens in the third range as well, which brings the 1 as an argument to inform the steps from a number to another in the range. 1 is also standard (meaning that there's no need to inform it as it's predetermined).

13)
# for loop

for i in range(11):
    print(i)

# while loop

i = 0
while i <= 10:
    print(i)
    i += 1

14)
spam.bacon().

Extra credit:
round(number[, ndigits]):
	Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.
abs():
	Return the absolute value of a number. The argument may be an integer or a floating point number. If the argument is a complex number, its magnitude is returned.

-Chapter III - Functions -

def Statements with Parameters

parameter is a variable that an argument is stored in when a function is called

Return Values and return Statements

return value of the function is the value that a function call evaluates to

with the return statement one can specify what the return value is

The None Value

the value called None (NoneType data type) represents the absence of value

behind the scenes, Python adds return None to the end of any function definition with no return statement

if you use return statement without a value, then None is returned

Keyword Arguments and print()

