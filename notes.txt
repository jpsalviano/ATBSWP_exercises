-Chapter I - Python Basics-

Math operators in Python (from higest to lowest precedence): ** % // / * - +

Expressions are just values combined with operators, and they always evaluate down to a single value.

Data type: category for values, and every value belongs to exactly one data type. Most common: integers (int) like -2, 0, 5; floating-point numbers (floats) like -1.25, -1.0, 0.0, 1.25; strings (str) like 'a', 'Hello!', '11 cats'.

Overwriting the variable: when a variable is assigned a new value, the old value is forgotten.

yourFirstProgram.py

Argument: a value that is passed to a function call.

print()
input()
len()
str(), int(), float()

Practice Questions

1:
* operator
'hello' value
-88.8 value
- operator
/ operator
+ operator
5 value

2:
spam variable
'spam' string

3:
integers, floats and strings

4:
values and operators
they evaluate to a single value

5:
the difference is on how the computer interprets the data - when the program is executed the expression is solved by the computer and it evaluates to a single value, while the statement feeds the computer with some kind of infomation and is not evaluated to a single value.

6:
20

7:
'spamspamspam'
'spamspamspam'

8:
a variable name can't begin with a number

9:
int(), float(), str()

10:
an integer can't be concatenated to a string nor a string can be added to a number
correction: 'I have eaten' + str(99) + ' burritos.'

Extra credit:
len():
	Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).

round(number[, ndigits]):
	Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.

Floating Point Arithmetic: Issues and Limitations.
(https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues)

"On most machines today, floats are approximated using a binary fraction with the numerator using the first 53 bits starting with the most significant bit and with the denominator as a power of two. In the case of 1/10, the binary fraction is 3602879701896397 / 2 ** 55 which is close to but not exactly equal to the true value of 1/10."

Representation error -> explains the “0.1” example in detail.

-Chapter II - Flow Control-

Boolean values: True / False

Comparison operators: == != < > <= =>

Boolean operators: and / or / not

After any math and comparison operators evaluate, Python evaluates the not operators first, then the end operators, and the the or operators.

Elements of Flow Control

Flow Control Statements

if statements

else statements

elif statements

while loop statements

break statements

continue statements

for loops and the range() function

An Equivalent while loop

The Starting, Stopping, and Stepping Arguments to range()

Importing modules

from import Statements

Ending a Program Early with sys.exit()

Practice Questions

1:
True and False

2:
and or not

3:
True and True = True
True and False = False
False and True = False
False and False = False

True or True = True
True or False = True
False or True = True
False or False = False

not True = False
not False = True

4:
False
False
True
False
False
True

5:
< <= > >= == !=

6:
== equal (comparison operator)
= assignment operator (stores a value to a variable)

7:
A piece of a block of code that is evaluated to True or False and depending of the result of that evaluation it executes the rest of the block of code or just skip it.
Answer from the book: A condition is an expression used in a flow control statement that evaluates to a Boolean value.

8:
corrected - The three blocks are everything inside the if statement and the lines
print('bacon') and print('ham').

	print('eggs')
	if spam > 5:
		print('bacon')
	else:
		print('ham')
	print('spam')

9:
spam = input()

if spam == 1:
    print('Hello')
elif spam == 2:
    print('Howdy')
else:
    print('Greetings!')

10)
ctrl + c

11)
a break statement makes the code leave the loop immediately while a continue statement restarts the loop right away

12)
there's no difference among those options. in the first case, only the final point of the range is informed which makes it start from 0. in the second range, the 0 is informed as the starting point, just as standard, and that's what happens in the third range as well, which brings the 1 as an argument to inform the steps from a number to another in the range. 1 is also standard (meaning that there's no need to inform it as it's predetermined).

13)
# for loop

for i in range(11):
    print(i)

# while loop

i = 0
while i <= 10:
    print(i)
    i += 1

14)
spam.bacon().

Extra credit:
round(number[, ndigits]):
	Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.
abs():
	Return the absolute value of a number. The argument may be an integer or a floating point number. If the argument is a complex number, its magnitude is returned.

-Chapter III - Functions -

def Statements with Parameters

parameter is a variable that an argument is stored in when a function is called

Return Values and return Statements

return value of the function is the value that a function call evaluates to

with the return statement one can specify what the return value is

The None Value

the value called None (NoneType data type) represents the absence of value

behind the scenes, Python adds return None to the end of any function definition with no return statement

if you use return statement without a value, then None is returned

Keyword Arguments and print()

print() keyword arguments: end='' and sep=''

Local and Global Scope

Local Variables Cannot Be Used in the Global Scope

Local Scopes Cannot Use Variables in Other Local Scopes

Global Variables Can Be Read from a Local Scope

Local and Global Variables with the Same Name

should be avoided

The global Statement

it modifies a global variable from within a function

in a function, a variable will either always be global or always be local

Functions as 'Black Boxes'

you treat functions as black boxes when you're not interested in its code, but only in its inputs (the parameters) and output value. that is possible only because there's no need to worry about variables in the local scope interacting with the global and other local scopes

Exception Handling

try and except clauses

once an error is detected, the except clause is executed and the code goes forward

A Short Program: Guess the Number

Practice Questions

1:
Functions are a good way to organize a code. They operate on a local scope that don't directly interact with other local scopes from different functions but there's the option to access (or even modify with the keyword global) information of the global scope.
Answer from book: Functions reduce the need for duplicate code. This makes programs
shorter, easier to read, and easier to update.

2:
The code in a function is executed when the function is called.

3:
The def statement.
def nameOfTheFuction(parameters):

4:
A function consists of the def statement and the code in its def clause. It describes instructions to the computer for the event of calling the function using arguments, when the function has parameters, or not.
A function call is the statement that consists of the name of the function followed by (), with arguments between the parenthesis, if the function predicts the use of parameters. That makes the code defined previously in the function be executed and evaluted to a return value.

5:
Only one global scope. The amount of local scopes depends on the number of functions in the program, since in each function there's a different local scope.

6:
The local scope is destroyed and all the assignments are undone, therefore the variables will be forgotten.

7:
A return value is the value that a function call evaluates to. It can be used as part of an expression

8:
The return value is None.

9:
You need to use the global statement.

10:
NoneType data type.

11:
It imports the module areallyourpetsnamederic, so you'll be able to use the functions from it.

12:
spam.bacon()

13:
You can use try and except clauses.
Answer from the book: Place the line of code that might cause an error in a try clause.

14:
In the try clause go function calls and in the except clause goes a code that will be executed when an error is encountered.
Answer from the book: The code that could potentially cause an error goes in the try clause.
The code that executes if an error happens goes in the except clause.

Practice Projects

(in the folder chapter3)

- Chapter IV - Lists -

The List Data Type

list value refers to the list itself (can be stored in a variable os passed to a function like any other value), no the values inside the list value

values inside the list are also called items, which are separated by commas

[] - empty list (just like '' is the empty string value)

Getting Individual Values in a List with Indexes

lists can also contain other list values, that can be accessed using multiple indexes (list[1][2] - accesses item list at index 1 and its item at index 2)

Negative Indexes

-1 is the last index in a list, -2 is the second-to-last, and so on

Getting Sublists with Slices [1:3]

a slice goes up to, but will not include, the value at the second index

Getting a List's Length with len()

Changing Values in a List with Indexes

List Concatenation and List Replication

Removing Values from Lists with del Statements

example: del list[1]

it also can be used on a simple variable to delete it, but it's mostly used to delete values from lists

Working with Lists

string concatenation - list + [element]

Using for Loops with Lists

common technique - for item in range(len(list)) - iterates over all the items

The in and not in Operators

they're used in expressions to connect two values: one to look for in a list and the list where it may be found - the expressions will evaluate to a Boolean value

The Multiple Assignment Trick

example:
cat = ['fat', 'black', 'loud']
size, color, disposition = cat

the number of variables and the length of the list must be exactly equal

Augmented Assignment Operators

+= -= *= /= %=

+= can be used for string and list concatenation, and the *= operator can do string and list replication

Methods

the same as a function but it's called on a value: listvalue.method(argument)

each data type has its own set of methods

Finding a Value in a List with the index() Method

listvalue.index('string to be found')

when there are dupliates of the value in the list, the index of its first appearance is returned

Adding Values to Lists with the append() and insert() Methods

append(): adds the argument to the of the list

insert(<index for the new value>, <new value to be inserted>): insert a value at any index in the list

Removing Values from Lists with remove()

listvalue.remove(<value to be removed>)

if the value appears multiple times in the list, only the first instance of if will be removed

the del statement (del list[index]) is good to use when you know the index of the value you want to remove; the remove() is good when you know the value you want to remove from the list

Sorting the Values in a List with the sort() Method

lists of number values or strings can be sorted, but you can't sort lists that have both number values and string values in them

“ASCIIbetical order” - uppercase letters come before lowercase letters

sorting in reverse order: list.sort(reverse=True)

sorting in alphabetical order: list.sort(key=str.lower)

Example Program: Magic 8 Ball with a List

Exceptions to Indentation Rules in Python

the multiline [] and the \ line continuation

List-like Types: Strings and Tuples

many of the things you can do with lists can also be done with strings: indexing; slicing; and using them with for loops, with len(), and with the in and not in operations

Mutable and Immutable Data Types

lists are mutable, strings are immutable

the only way to mutate a string is slicing it and creating a new string

The Tuple Data Type

almost identical to the list data type, except they're typed with parentheses () and they're immutable

if there's only one value in the tuple, placing a trailing comma after the value inside the parethenses is necessary for Python to interpret it as a tuple, otherwise it'd just interpret it as a value inside parentheses

tuples are used when you don't intend for some sequence of values to change

as they're immutable, code using tuples is slightly faster than code using lists

Converting Types with the list() and tuple() Functions

converting a tuple to a list is handy if you need a mutable version of a tuple value

References

when you assign a list to a variable, you are actually assigning a list reference to the variable - that happens to mutable data types like dictionary and list

a reference is a value that points to some bit of data

Passing References

when you alter the list referenced in a variable, you're altering the list in place - even if the change is made in a function call, the list is changed globally

The copy Module's copy() and deepcopy() Functions

list2 = copy.copy(<list1>)

if the list you need to copy contains lists:
list2 = copy.deepcopy(<list1>)

Practice Questions

1:
it's the empty list value.

2:
spam[2] = 'hello'

3:
'd'

4:
'd'

5:
['a', 'b']

6:
1

7:
[3.14, 'cat', 11, 'cat', True, 99]

8:
[3.14, 11, 'cat', True]

9:
the same as string concatenation and replication operators (+ and *)

10:
append() passes an argument and adds it to the end of the list it was called on
insert(<index for the new value>, <new value to be inserted>): inserts a value at any index in the list it was called on

11:
you can use a del statement on list[index]; or
you can use the remove() method, passing the value of the item you want to be removed

12:
they both are ordered sequences (lists contain items and strings contain single characters) and can be operated using their elements indexes and slices, they can be concatenated, replicated, used in for loops and in the len() function

13:
tuples are immutable and use ()
lists are mutable and use []

14:
(42,)

15:
to get the tuple form of a list value you need to use the tuple() function and the list value as the argument. the other way around: list(), using the tuple value as the argument.

16:
they contain references to list values

17:
both functions can make copies of lists that are passed as arguments - the copy.deepcopy() though is used to make copies of lists that are contained in other lists

Practice Projects

- Chapter V - Dictionaries and Structuring Data -

The Dictionary Data Type

indexes for dictionaries are called keys, and a key with its associated value is called a key-value pair

Dictionaries vs. Lists

items in dictionaries are unordered - so they can't be sliced like lists

The keys(), values(), and items() Methods

these methods will return list-like values of the dictionary (keys, values and both)

the values returned are not true lists as they can't be modified and do not have an append() method

but these data types (dict_keys, dict_values, and dict_items) can be used in for loops

if you want a true list from one of these methods: list()

when using items() in a for loop, you can use the multiple assignment trick

Checking Whether a Key or Value Exists in a Dictionary

'in' and 'not in'

in <dictname> == in dictname.keys() - the dictionary name only calls the keys values

if you want to check the values of values or items, gotta use the methods

The get() Method

two args: the key of the value to retrieve and a fallback value to return if that key does not exist

The setdefault() Method

sets a value in a dictionary for a certain key only if that key does not already have a value

two args: a key to check for and the value to set at the key if the does not exist. If it exists, the method will return the key's value

Pretty Printing

import pprint

pprint.pprint(someDictionaryValue) -> pretty prints the dictionary
pprint.pformat(someDictionaryValue) -> gets the prettified text as a string value instead of displaying it on the screen

Using Data Structures to Model Real-World Things

A Tic-Tac-Toe Board

Nested Dictionaries and Lists

Summary

Practice Questions

1:
{}

2:
{'foo': 42}

3:
Lists are ordered sequences and its items are indexed to an integer, while dictionaries are unordered and its items consist of a key-value pair.

4:
A KeyError is displayed, since there's no 'foo' key in the spam dictionary.

5:
There's no practical difference as 'cat' in spam will look for keys named 'cat' in spam dictionary.

6:
The expression 'cat' in spam checks whether there is a key named 'cat' in spam dictionary, while 'cat' in spam.values() checks if there's a value 'cat' for one of the keys.

7:
spam.setdefault('color', 'black')

8:
pprint.pprint()

Practice Projects

fantasyGameInventory.py

- Chapter 6 - Manipulating Strings -

Working with Strings

String Literals

Double Quotes

Escape Characters

\ followed by the character

Raw Strings

r before the beginning quotation

it completely ignores all escape characters and prints any backslash that appears in the string

they are useful if you're typing string values that contain many backslashes, such as the ones used for regular expressions

Multiline Strings with Triple Quotes

any quotes, tabs, or newlines in betwwent he 'triple quotes' are considered part of the string

Multiline Comments

a multiline string is often used for comments that span multiple lines

the hash character (#) marks the beginning of a comment for the rest of the line only

Indexing and Slicing Strings

same way lists do

The in and not in Operators with Strings

same way as lists

Useful String Methods

The upper(), lower(), isupper(), and islower() String Methods

isupper() and islower() will return a Boolean True value if the string hs at least one letter and all the leterres are uppercase or lowercase

The isX String Methods

isalpha() - returns True if the string consists only of letters and is not blank
isalnum() - returns True if the string consists only of letters and/or numbers and is not blank
isdecimal() - returns True if the string consists only of numeric characters and is not blank
isspace() - returns True if the string consists only of spaces, tabs, and newlines and is not blank
istitle() - returns True is the string consists only of words that begin with an uppercase letter followed by only lowercase letters

these methods are helpful when you need to validate user input

The startswith() and endswith() String Methods

